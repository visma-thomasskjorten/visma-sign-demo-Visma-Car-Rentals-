using System;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Security.Cryptography;
using System.Threading.Tasks;
using System.Web;

namespace VismaCarRental.net
{
    public class VismaSign
    {
        private string root;
        private string identifier;
        private HashAlgorithm macHash;
        private HashAlgorithm contentHash;
        private HttpClient client = new HttpClient();

        public VismaSign(string root, string identifier, string secret)
        {
            this.root = root;
            this.identifier = identifier;
            this.macHash = new HMACSHA512(Convert.FromBase64String(secret));
            this.contentHash = new MD5CryptoServiceProvider();
        }

        // Visma Sign API uses an authentication-mechanism based on Amazon HMAC to secure the communication.
        // This involves generating a encrypted signature which contains the content of the message as part of the authentication-header 
        private async Task<HttpRequestMessage> WithAuthHeaders(HttpRequestMessage request)
        {
            // If the request has content, add the hashed (MD5) value of the content to the ContentMD5-header 
            if (request.Content != null) {
                request.Content.Headers.ContentMD5 = contentHash.ComputeHash(await request.Content.ReadAsByteArrayAsync());
            }

            // Add the current date and time to the Date-header
            request.Headers.Date = request.Headers.Date.GetValueOrDefault(DateTime.UtcNow);

            // The Authorization header is built up with the following structure
            // "Onnistuu {ClientIdentifier}:{EncryptedSignature}"
            // The signature is generated by creating an ecrypted hash (based on your secret) from the values of HTTP-headers
            // HTTP-Method, ContentMD5, Content-type, Date and RequestUri - separated by a new-line "\n"
            request.Headers.Authorization =
               new AuthenticationHeaderValue(
                   "Onnistuu",
                   identifier + ":" +
                    Convert.ToBase64String(
                        macHash.ComputeHash(
                            System.Text.Encoding.UTF8.GetBytes(
                                String.Join(
                                    "\n",
                                    new string[] {
                                        request.Method.ToString(),
                                        Convert.ToBase64String(
                                            request.Content != null ?
                                            request.Content.Headers.ContentMD5 :
                                            contentHash.ComputeHash(new byte[] {})
                                        ),
                                        request.Content != null ? request.Content.Headers.ContentType.ToString() : "",
                                        request.Headers.Date.GetValueOrDefault(DateTime.UtcNow).ToString("r"),
                                        request.RequestUri.ToString().Replace(root, "")
                                    }
                                )
                            )
                        )
                    )
                );

            return request;
        }

        public async Task<string> DocumentCreate(string body)
        {
            var request = new HttpRequestMessage(
                HttpMethod.Post,
                root + "/api/v1/document/"
            );

            // Adding the data (json) to the HTTP-request
            request.Content = new StringContent(body, System.Text.Encoding.UTF8, "application/json");
            
            // Attach the authentication-headers to the HTTP-request
            request = await WithAuthHeaders(request);

            // Execute the request and collect the response
            var response = await client.SendAsync(request);

            // Check if result is success
            if (!response.IsSuccessStatusCode)
            {
                throw new Exception("Document create failed");
            }

            // Location will contain the URI to the newly created document
            return response.Headers.Location.ToString();
        }

        public async Task DocumentAddFile(string documentUri, byte[] fileContent, string filename = null)
        {
            var request = new HttpRequestMessage(
                HttpMethod.Post,
                documentUri + "/files" +
                (
                    filename != null ?
                    ("?filename=" + HttpUtility.UrlEncode(filename)) :
                    ""
                )
            );

            var requestContent = new ByteArrayContent(fileContent);
            requestContent.Headers.ContentType = new MediaTypeHeaderValue("application/pdf");
            request.Content = requestContent;
            request = await WithAuthHeaders(request);

            var response = await client.SendAsync(request);

            if (!response.IsSuccessStatusCode)
            {
                throw new Exception("Document file add failed");
            }
        }

        public async Task<string> DocumentAddInvitations(string documentUri, string body)
        {
            var request = new HttpRequestMessage(
                HttpMethod.Post,
                documentUri + "/invitations"
            );

            request.Content = new StringContent(body, System.Text.Encoding.UTF8, "application/json");
            request = await WithAuthHeaders(request);

            var response = await client.SendAsync(request);

            if (!response.IsSuccessStatusCode)
            {
                throw new Exception("Document add invitations failed");
            }

            return await response.Content.ReadAsStringAsync();
        }
    }
}